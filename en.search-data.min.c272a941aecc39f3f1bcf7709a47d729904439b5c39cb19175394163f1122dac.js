'use strict';(function(){const b={cache:!0};b.doc={id:'id',field:['title','content'],store:['title','href','section']};const a=FlexSearch.create('balance',b);window.bookSearchIndex=a,a.add({id:0,href:'/seg-pps.github.io/docs/pps/with-toc/',title:"With ToC",section:"PPS",content:"Caput vino delphine in tamen vias #  Cognita laeva illo fracta #  Lorem markdownum pavent auras, surgit nunc cingentibus libet Laomedonque que est. Pastor An arbor filia foedat, ne fugit aliter, per. Helicona illas et callida neptem est Oresitrophos caput, dentibus est venit. Tenet reddite famuli praesentem fortibus, quaeque vis foret si frondes gelidos gravidae circumtulit inpulit armenta nativum.\n Te at cruciabere vides rubentis manebo Maturuit in praetemptat ruborem ignara postquam habitasse Subitarum supplevit quoque fontesque venabula spretis modo Montis tot est mali quasque gravis Quinquennem domus arsit ipse Pellem turis pugnabant locavit  Natus quaerere #  Pectora et sine mulcere, coniuge dum tincta incurvae. Quis iam; est dextra Peneosque, metuis a verba, primo. Illa sed colloque suis: magno: gramen, aera excutiunt concipit.\n Phrygiae petendo suisque extimuit, super, pars quod audet! Turba negarem. Fuerat attonitus; et dextra retinet sidera ulnas undas instimulat vacuae generis? Agnus dabat et ignotis dextera, sic tibi pacis feriente at mora euhoeque comites hostem vestras Phineus. Vultuque sanguine dominoque metuit risi fama vergit summaque meus clarissimus artesque tinguebat successor nominis cervice caelicolae.\n Limitibus misere sit #  Aurea non fata repertis praerupit feruntur simul, meae hosti lentaque citius levibus, cum sede dixit, Phaethon texta. Albentibus summos multifidasque iungitur loquendi an pectore, mihi ursaque omnia adfata, aeno parvumque in animi perlucentes. Epytus agis ait vixque clamat ornum adversam spondet, quid sceptra ipsum est. Reseret nec; saeva suo passu debentia linguam terga et aures et cervix de ubera. Coercet gelidumque manus, doluit volvitur induta?\nEnim sua #  Iuvenilior filia inlustre templa quidem herbis permittat trahens huic. In cruribus proceres sole crescitque fata, quos quos; merui maris se non tamen in, mea.\nGermana aves pignus tecta #  Mortalia rudibusque caelum cognosceret tantum aquis redito felicior texit, nec, aris parvo acre. Me parum contulerant multi tenentem, gratissime suis; vultum tu occupat deficeret corpora, sonum. E Actaea inplevit Phinea concepit nomenque potest sanguine captam nulla et, in duxisses campis non; mercede. Dicere cur Leucothoen obitum?\nPostibus mittam est nubibus principium pluma, exsecratur facta et. Iunge Mnemonidas pallamque pars; vere restitit alis flumina quae quoque, est ignara infestus Pyrrha. Di ducis terris maculatum At sede praemia manes nullaque!\n"}),a.add({id:1,href:'/seg-pps.github.io/docs/pps/intro/',title:"Intro",section:"PPS",content:"At me ipso nepotibus nunc celebratior genus #  Tanto oblite #  Lorem markdownum pectora novis patenti igne sua opus aurae feras materiaque illic demersit imago et aristas questaque posset. Vomit quoque suo inhaesuro clara. Esse cumque, per referri triste. Ut exponit solisque communis in tendens vincetis agisque iamque huic bene ante vetat omina Thebae rates. Aeacus servat admonitu concidit, ad resimas vultus et rugas vultu dignamque Siphnon.\nQuam iugulum regia simulacra, plus meruit humo pecorumque haesit, ab discedunt dixit: ritu pharetramque. Exul Laurenti orantem modo, per densum missisque labor manibus non colla unum, obiectat. Tu pervia collo, fessus quae Cretenque Myconon crate! Tegumenque quae invisi sudore per vocari quaque plus ventis fluidos. Nodo perque, fugisse pectora sorores.\nSumme promissa supple vadit lenius #  Quibus largis latebris aethera versato est, ait sentiat faciemque. Aequata alis nec Caeneus exululat inclite corpus est, ire tibi ostendens et tibi. Rigent et vires dique possent lumina; eadem dixit poma funeribus paret et felix reddebant ventis utile lignum.\n Remansit notam Stygia feroxque Et dabit materna Vipereas Phrygiaeque umbram sollicito cruore conlucere suus Quarum Elis corniger Nec ieiunia dixit  Vertitur mos ortu ramosam contudit dumque; placabat ac lumen. Coniunx Amoris spatium poenamque cavernis Thebae Pleiadasque ponunt, rapiare cum quae parum nimium rima.\nQuidem resupinus inducto solebat una facinus quae #  Credulitas iniqua praepetibus paruit prospexit, voce poena, sub rupit sinuatur, quin suum ventorumque arcadiae priori. Soporiferam erat formamque, fecit, invergens, nymphae mutat fessas ait finge.\n Baculum mandataque ne addere capiti violentior Altera duas quam hoc ille tenues inquit Sicula sidereus latrantis domoque ratae polluit comites Possit oro clausura namque se nunc iuvenisque Faciem posuit Quodque cum ponunt novercae nata vestrae aratra  Ite extrema Phrygiis, patre dentibus, tonso perculit, enim blanda, manibus fide quos caput armis, posse! Nocendo fas Alcyonae lacertis structa ferarum manus fulmen dubius, saxa caelum effuge extremis fixum tumor adfecit bella, potentes? Dum nec insidiosa tempora tegit spirarunt. Per lupi pars foliis, porreximus humum negant sunt subposuere Sidone steterant auro. Memoraverit sine: ferrum idem Orion caelum heres gerebat fixis?\n"}),a.add({id:2,href:'/seg-pps.github.io/docs/pps/intro/Tutorials/',title:"Tutoriales",section:"PPS",content:"Introducción\rLos siguientes enlaces son muy apropiados para el seguimiento de la asignatura:\n\rEl lenguaje de programación C\rexplainshell.com\rLlamadas al sistema\rIntrodución al gcc (compilador C)\rGCC y Make\rDescripción linux man\rLinux man on line\r\rEjemplo de compilación multifuente (link)\rLas siguientes órdenes permiten construir un ejecutable a partir de tres archivos fuente y dos librerías\n#Compilar bd.c generando objeto bd.o\npepito@mihost:~$gcc –c bd.c –o bd.o\r#Compilar motor.c generando objeto motor.o tomando funciones de la librería libgraphics\npepito@mihost:~$gcc –c motor.c –lgraphics –o motor.o\r#Compilar menu.c generando menu.o tomando funciones de libcursespepito@mihost:~$gcc –c menu.c –lcurses –o menu.o\u0026nbsp;\r#Montar los tres objetos anteriores en un ejecutable llamado juegopepito@mihost:~$gcc bd.o motor.o menu.o –o juego\rSecuencia típica de compilación\r\u0026nbsp;\n"}),a.add({id:3,href:'/seg-pps.github.io/docs/pps/',title:"PPS",section:"Docs",content:"Ubi loqui #  Mentem genus facietque salire tempus bracchia #  Lorem markdownum partu paterno Achillem. Habent amne generosi aderant ad pellem nec erat sustinet merces columque haec et, dixit minus nutrit accipiam subibis subdidit. Temeraria servatum agros qui sed fulva facta. Primum ultima, dedit, suo quisque linguae medentes fixo: tum petis.\nRapit vocant si hunc siste adspice #  Ora precari Patraeque Neptunia, dixit Danae Cithaeron armaque maxima in nati Coniugis templis fluidove. Effugit usus nec ingreditur agmen ac manus conlato. Nullis vagis nequiquam vultibus aliquos altera suum venis teneas fretum. Armos remotis hoc sine ferrea iuncta quam!\nLocus fuit caecis #  Nefas discordemque domino montes numen tum humili nexilibusque exit, Iove. Quae miror esse, scelerisque Melaneus viribus. Miseri laurus. Hoc est proposita me ante aliquid, aura inponere candidioribus quidque accendit bella, sumpta. Intravit quam erat figentem hunc, motus de fontes parvo tempestate.\niscsi_virus = pitch(json_in_on(eupViral), northbridge_services_troubleshooting, personal( firmware_rw.trash_rw_crm.device(interactive_gopher_personal, software, -1), megabit, ergonomicsSoftware(cmyk_usb_panel, mips_whitelist_duplex, cpa))); if (5) { managementNetwork += dma - boolean; kilohertz_token = 2; honeypot_affiliate_ergonomics = fiber; } mouseNorthbridge = byte(nybble_xmp_modem.horse_subnet( analogThroughputService * graphicPoint, drop(daw_bit, dnsIntranet), gateway_ospf), repository.domain_key.mouse(serverData(fileNetwork, trim_duplex_file), cellTapeDirect, token_tooltip_mashup( ripcordingMashup))); module_it = honeypot_driver(client_cold_dvr(593902, ripping_frequency) + coreLog.joystick(componentUdpLink), windows_expansion_touchscreen); bashGigabit.external.reality(2, server_hardware_codec.flops.ebookSampling( ciscNavigationBacklink, table + cleanDriver), indexProtocolIsp);  Placabilis coactis nega ingemuit ignoscat nimia non #  Frontis turba. Oculi gravis est Delphice; inque praedaque sanguine manu non.\nif (ad_api) { zif += usb.tiffAvatarRate(subnet, digital_rt) + exploitDrive; gigaflops(2 - bluetooth, edi_asp_memory.gopher(queryCursor, laptop), panel_point_firmware); spyware_bash.statePopApplet = express_netbios_digital( insertion_troubleshooting.brouter(recordFolderUs), 65); } recursionCoreRay = -5; if (hub == non) { portBoxVirus = soundWeb(recursive_card(rwTechnologyLeopard), font_radcab, guidCmsScalable + reciprocalMatrixPim); left.bug = screenshot; } else { tooltipOpacity = raw_process_permalink(webcamFontUser, -1); executable_router += tape; } if (tft) { bandwidthWeb *= social_page; } else { regular += 611883; thumbnail /= system_lag_keyboard; }  Caesorum illa tu sentit micat vestes papyriferi #  Inde aderam facti; Theseus vis de tauri illa peream. Oculos uberaque non regisque vobis cursuque, opus venit quam vulnera. Et maiora necemque, lege modo; gestanda nitidi, vero? Dum ne pectoraque testantur.\nVenasque repulsa Samos qui, exspectatum eram animosque hinc, aut manes, Assyrii. Cupiens auctoribus pariter rubet, profana magni super nocens. Vos ius sibilat inpar turba visae iusto! Sedes ante dum superest extrema.\n"}),a.add({id:4,href:'/seg-pps.github.io/blog/',title:"Blog",section:"Portada",content:"Blog\n"}),a.add({id:5,href:'/seg-pps.github.io/docs/pps/intro/EditRemoto/',title:"Edición remota en Linux",section:"PPS",content:"Los siguientes enlaces muestran los pasos necesarios para configurar marcadores remotos con Nautilus:\n\rConectarse a servidor SSH, FTP, SMB desde Nautilus\rConexión ssh omitiendo la introducción de claves\r\rObviamente, lo anterior requiere un linux funcionando.\u0026nbsp;En este enlace\u0026nbsp;se describe paso a paso el procedimiento para generar un pendrive con un linux arrancable. He comprobado que funciona con una distro Ubuntu 16.04\nOtros enlaces que describen el proceso son\u0026nbsp;este (en español)\u0026nbsp;y este otro (en inglés). Existen otras alternativas como son el arranque dual, un sistema de virtualización (VMware, VirtualBox, Docker, etc.) pero esta es, probablemente, la más simple y, sobre todo, la que menos interfiere con el sistema que tengamos instalado y usemos habitualmente\nCopiar ficheros desde/a un servidor remoto\rDos opciones:\n\rInstalar Filezilla\rMediante el comando scp\u0026nbsp;(en Windows WinSCP)\r "}),a.add({id:6,href:'/seg-pps.github.io/docs/pps/EjBase/',title:"Ejercicio Base",section:"PPS",content:"Este ejercicio atiende a los siguientes objetivos:\n\rEntender el paso de argumentos en la línea de orden\rConsolidar la idea de programa multisource en C\rPresentar los programas auxiliares que se suministran para las prácticas\rPresentar formateo de la salida estándar con fprintf()\rPresentar los punteros en C\r\rMATERIAL DE APOYO\rLecturas recomendadas:\r\rGuía Rápida del lenguaje C en\u0026nbsp;Tutorials Point\rBaúl de Linux\r\rDescarga del material disponible aquí\u0026nbsp;\n"}),a.add({id:7,href:'/seg-pps.github.io/docs/pps/intro/Linux/',title:"Intro Linux",section:"PPS",content:"Intro Linux\rPara los muy novatos:\n\rLinux Journey\rTLDP: Introducción a Linux\rIntérprete de comandos (Ahora aplica especialmente\u0026nbsp;Part 1)\r\rBibliografía Extra\rLos siguientes enlaces son muy apropiados para el seguimiento de la asignatura:\n\rThe Linux Programming Interface. M. Kerrisk. Descargar caps 1-3\rLinux System Programming 2ª Ed. R. Love. O’Reilly\r\rInstalar Linux\r\rhttps://ubunlog.com/como-crear-un-usb-bootable-de-ubuntu-desde-mac-y-windows/\rhttps://www.xataka.com/basics/como-crear-live-usb-ubuntu-windows-que-guarde-cambios-que-hagas-para-siguiente-sesion\r "}),a.add({id:8,href:'/seg-pps.github.io/docs/pps/Ficheros/',title:"Manejo de Ficheros en C",section:"PPS",content:"El puntero a un archivo:\u0026nbsp;FILE *fptr;\r\rfptr es un puntero a una estructura que define información sobre un archivo, incluyendo el nombre, el estado y la posición actual en el archivo. Es mantenido por el sistema y resulta clave para el funcionamiento de las funciones de E/S con buffer\rEl tipo FILE\u0026nbsp;(descriptor de fichero) se define en stdio.h\rLos archivos se dicen de texto o binarios según la naturaleza de su contenido\r\rDeclaración struct file:\rstruct file {\rmode_t f_mode;\rloff_t f_pos;\runsigned short f_flags;\runsigned short f_count;\runsigned long f_reada, f_ramax, f_raend, f_ralen, f_rawin;\rstruct file *f_next, *f_prev;\rint f_owner; /* pid or -pgrp where SIGIO should be sent */\rstruct inode * f_inode;\rstruct file_operations * f_op;\runsigned long f_version;\rvoid *private_data; /* needed for tty driver, and maybe others */\r};\rResumen de funciones\r\rfopen(): Abre un archivo\rfclose(): Cierra un archivo\rfgets(): Lee un string\rfputs(): Escribe string\rftell(), fseek(): Recorrer archivo\rfprintf(): Escribe una salida con formato en el archivo\rfscanf(): Lee una entrada con formato desde el archivo\rfeof(): Cierto si fin del archivo\rferror(): Cierto si se produce un error\rrewind(): Se posiciona al principio del mismo\rremove(): Borra archivo\rfflush(): Vacia archivo\r\r\u0026nbsp;\nOperaciones básicas\rApertura de un archivo\rfopen() abre un buffer y lo asocia a un archivo\nFILE * fopen(const char * nombre_archivo, const char * modo);\nnombre_archivo es un puntero a una cadena de caracteres que representan un nombre valido del\u0026nbsp;archivo y puede incluir una especificación del directorio (path)\u0026nbsp;la cadena a la que apunta modo determina como se abre el archivo. Los valores permitidos para modo son:\n\r\u0026nbsp;r: Abre un archivo de texto para lectura\rw: Crea un archivo de texto para escritura\ra: Abre un archivo de texto para añadir\rrb: Abre un archivo en modo lectura binaria\rwb: Crea un archivo en modo escritura binaria\rab: Abre un archivo binario para añadir\rr+: Abre un archivo de texto para lectura\u0026nbsp;/ escritura\rw+: Crea un archivo de texto para escritura\u0026nbsp;/ escritura\ra+: Añade o crea un archivo de texto para lectura / escritura\rr+b: Abre un archivo binario para lectura / escritura\rw+b: Crea un archivo binario para lectura / escritura\ra+b: Añade o crea un archivo binario para lectura / escritura\r\rSiempre conviene tener presente lo siguiente:\n\rfopen() devuelve un puntero a archivo. Un programa nunca debe alterar el valor de ese puntero. Si se produce un error cuando se esta intentando abrir un archivo, fopen() devuelve un puntero nulo\rEl modo texto o binario tiene múltiples implicaciones. Por ejemplo, la relativa a la interpretación de los caracteres especiales como son el salto de línea (retorno de carro) o el fin de línea\r\rCierre de un archivo\rfclose() cierra una secuencia o buffer previamente abierta mediante una llamada a fopen(). Escribe toda la información aún en el buffer al disco y realiza un cierre formal del archivo a nivel del sistema operativo. Un error en el cierre (el no cierre, por ejemplo) de una secuencia puede generar todo tipo de problemas, incluyendo la pérdida de los datos, la destrucción de archivos y probables errores esotéricos en el programa. El prototipo de esta función es:\nint fclose(FILE *F);\nSi devuelve un valor cero significa éxito (curioso, pero cierto ?)\nLeer y/o escribir en un archivo con fprintf() y fscanf()\rint fprintf(FILE *F, const char *cadena_de_control, .....); \nint fscanf(FILE *F, const char *cadena_de_control, .....);\nComo prinft() y scanf() excepto que operan sobre archivo\nLeer y/o escribir en un archivo con fgets() y fputs()\rFunciones especialmente adecuadas para leer y escribir archivos de texto\nchar *fgets(char *str, int long, FILE *F);\u0026nbsp;\rSi se alcanza el EOF (End of File) la llamada fgets() retorna NULL\nchar *fputs(char *str, FILE *F);\rchar buff[1024]; // Buffer en memoria de 1024 caracteres\nFILE *fd; // Descriptor de ficherofd =fopen(\u0026quot;/tmp/ejemplo.txt\u0026quot;,\u0026ldquo;r\u0026rdquo;); // Abrir en modo solo lecturaif(fd ==NULL){perror(\u0026ldquo;Error al abrir /tmp/ejemplo.txt\u0026rdquo;); // Mostrar error en stderrreturn(-1); // Devolver error genérico}\n// Leer máximo 1024 caracteres; podrían ser menos\n// buff funciona indistintamente como char[] y char * if(fgets (buff,1024,fd) != NULL )fputs(buff, stdout); // imprime buffer en stdoutfclose(fp); // OJO: cerrar siempre el descriptor para evitar efectos paranormales\nFin de archivo feof()\nint feof(FILE *F);\nCuando se abre un archivo para entrada binaria, la propia marca EOF se puede leer como un dato cualquiera. Esto podría hacer que la rutina de lectura indicase fin de archivo aún cuando el final físico no se haya alcanzado. Para resolver este problema, C incluye la función feof(), que determina cuando se ha alcanzado el real del archivo leyendo datos binarios\nSu prototipo se encuentra en stdio.h. Devuelve cierto si se ha alcanzado el final del archivo, en cualquier otro caso, 0. Por supuesto (moraleja), se puede aplicar también a archivos de texto\nRecorrer archivo con\u0026nbsp;fseek()\u0026nbsp;y\u0026nbsp;ftell()\rEstas dos funciones son interesantes para cosas como, por ejemplo, leer un fichero al revés (hay, sin embargo, formas mejores de hacer lo mismo)\nint fseek(FILE *F, long int desplz, int posact);\u0026nbsp;\rSe desplaza el nº de bytes que indica desplaz desde la posición que indica posact. Esta puede vales SEEK_SET (inicio absoluto del fichero), SEEK_CUR (posición actual) o SEEK_END\nSi no hubo error devuelve 0\nlong int ftell(FILE *F);\rNo tiene misterio alguno. Devuelve el valor actual\u0026nbsp;del indicador de posición o -1 si error\nFunción ferror()\rint ferror(FILE *F);\nSu prototipo se encuentra en stdio.h. Determina si se ha producido error en una operación sobre un archivo.\u0026nbsp;F es un puntero a un archivo válido. Devuelve cierto (1) si se ha producido un error en la última\u0026nbsp;operación sobre el archivo. En caso contrario, devuelve falso (0). Debido a que cada operación sobre el archivo actualiza la condicioón de error, se debe llamar a ferror() inmediatamente después de la operación\nFunción remove()\rint remove(char *nombre_archivo);\nBorra el archivo especificado. Devuelve cero si tiene éxito\nFunción fflush()\rint fflush(FILE *F);\nEscribe todos los datos en el buffer sobre el archivo en el disco\nSi se llama esta función con un puntero nulo se vacían todos los buffers de todos los archivos abiertos. Devuelve cero si tiene éxito, en otro caso, devuelve EOF\u0026nbsp;\nEjemplo\r#include \u0026lt;stdio.h\u0026gt;\r#include \u0026lt;stdlib.h\u0026gt;\rint main() { FILE *archivo;\n\u0026lt;span class=\u0026quot;kt\u0026quot;\u0026gt;char\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;caracteres\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;[\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;mi\u0026quot;\u0026gt;100\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;]; /* un buffer de tamaño 100 */\u0026lt;/span\u0026gt;\r\u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;archivo\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;o\u0026quot;\u0026gt;=\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;fopen\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;(\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;s\u0026quot;\u0026gt;\u0026quot;pepito.txt\u0026quot;\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;, \u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;s\u0026quot;\u0026gt;\u0026quot;r\u0026quot;\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;); /* abrir el archivo */\u0026lt;/span\u0026gt;\r\u0026lt;span class=\u0026quot;k\u0026quot;\u0026gt;if\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;(\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;archivo\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;o\u0026quot;\u0026gt;==\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;nb\u0026quot;\u0026gt;NULL\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;)\u0026lt;/span\u0026gt;\r\u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;exit\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;(\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;mi\u0026quot;\u0026gt;1\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;); /* no fue abierto, salir corriendo */\u0026lt;/span\u0026gt;\r\u0026lt;span class=\u0026quot;k\u0026quot;\u0026gt;else\u0026lt;/span\u0026gt;\r\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;{\u0026lt;/span\u0026gt;\r\u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;printf\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;(\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;s\u0026quot;\u0026gt;\u0026quot;\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;se\u0026quot;\u0026gt;\\n\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;s\u0026quot;\u0026gt;El contenido del archivo es \u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;se\u0026quot;\u0026gt;\\n\\n\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;s\u0026quot;\u0026gt;\u0026quot;\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;);\u0026lt;/span\u0026gt;\r\u0026lt;span class=\u0026quot;k\u0026quot;\u0026gt;while\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;(\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;feof\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;(\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;archivo\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;)\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;o\u0026quot;\u0026gt;==\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;mi\u0026quot;\u0026gt;0\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;) /* mientras no alcance el final \u0026lt;strong\u0026gt;real\u0026lt;/strong\u0026gt; */\u0026lt;/span\u0026gt;\r\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;{\u0026lt;/span\u0026gt;\rprintf(\u0026quot;Ahora LEE\\n\u0026quot;);\u0026lt;br /\u0026gt;\u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt; fgets\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;(\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;caracteres\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;, \u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;mi\u0026quot;\u0026gt;100\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;, \u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;archivo\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;); /* ojo, lee de 100 en 100 */\u0026lt;br /\u0026gt;\u0026lt;/span\u0026gt; printf(\u0026quot;Ahora ESCRIBE\\n\u0026quot;); \u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;printf\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;(\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;s\u0026quot;\u0026gt;\u0026quot;%s\u0026quot;\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;,\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;caracteres\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;);\u0026lt;/span\u0026gt;\r\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;}\u0026lt;/span\u0026gt;\r\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;}\u0026lt;/span\u0026gt;\r\u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;fclose\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;(\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;archivo\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;); /* salir cerrando el archivo */\u0026lt;/span\u0026gt;\r\u0026lt;span class=\u0026quot;k\u0026quot;\u0026gt;return\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;mi\u0026quot;\u0026gt;0\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;;\u0026lt;/span\u0026gt;\r }\nEjercicio\rEl ejercicio Struct Libro del tema Structs y Union incluye manejo de ficheros. Descargar aquí\nInformación adicional\r\rC File I/O\rC Library \u0026lt;stdio.h\u0026gt;\r "}),a.add({id:9,href:'/seg-pps.github.io/pps/',title:"PPS",section:"Portada",content:"PPS\n"}),a.add({id:10,href:'/seg-pps.github.io/docs/pps/intro/Primer/',title:"Primeros Pasos en C",section:"PPS",content:'Primer Ejemplo\rFundamentos C. Ejemplo 1st.c\u0026nbsp;Click aquí\nSecuencia de compilación\r\rFichero fuente =\u0026gt; editor de archivos (programas)\rCompilación =\u0026gt; compilador gcc para general el objeto (código compilado)\rEjecución =\u0026gt; binario, código ejecutable. Ojo a los permisos en Linux\rEjamplos en el fichero compilar.txt\r\rBloques de programas\r\rIncludes, librerías. Definición de macros\rDeclaración (ojo, distinto de definición) de variables y funciones\rDefinición de funciones. Código\rFunción main. Argumentos de programa\r\rSegundo Ejemplo: I/O printf\rDescargar archivo fuente de aquí\nClaves del ejercicio\r\rDeclaración vs Definición\rUso de printf? Para algo está el manual:\u0026nbsp;man 3 printf\rArgumentos de main. Paso de parámetros a los programas\r\rTercer Ejemplo\rOJO: este ejercicio contiene elementos, por ejemplo, punteros en los argumentos en la línea de orden que aún no se han visto. Por tanto, lo relevante del ejemplo es que se trata del primer caso donde interviene más de un fichero fuente\u0026nbsp;como también ocurre en los ejercicios de las prácticas. Por consiguiente, la compilación de los mismos va a resultar algo más compleja puesto que se han de compilar y montar todos los ficheros que componen la "aplicación"\nLa siguiente línea de orden compila los dos ficheros fuente (auxiliar.c y ejBase.c) y monta el ejecutable ejBase\ngcc -Wall auxiliar.c ejBase.c -o ejBase\nDescargar los fuentes de ejBase aquí\nEjercicio\rReorganizar los fuentes del segundo ejemplo para que el código de MiFuncion()\u0026nbsp;esté en un archivo fuente separado llamado MiFuncion.c\u0026nbsp;Es decir, la solución final requiere 2 archivos .c\n'}),a.add({id:11,href:'/seg-pps.github.io/progii/',title:"ProgII",section:"Portada",content:"ProgII\n"}),a.add({id:12,href:'/seg-pps.github.io/docs/pps/StringC/',title:"Strings en C",section:"PPS",content:'NOTAS PREVIAS\r\rEjercicio ultra sencillo para presentar arrays y strings en C\rSe presupone dominio de estructuras iterativas (bucles) y arrays (en el lenguaje que sea)\rTambién se ven las funciones de librería printf(), scanf(), fgets(), strcpy() y strcat()\rEn todo caso, se recomienda revisar la documentación de todas las funciones (librerías del sistema) utilizadas en el ejercicio\r\rMATERIAL DE APOYO\rEnlace de descarga pulsando aquí: StringC.zip\nGuías ultra-rápidas:\r\rhttps://www.tutorialspoint.com/cprogramming/c_strings.htm\rhttps://www.tutorialspoint.com/c_standard_library/stdio_h.htm\rhttps://www.tutorialspoint.com/c_standard_library/stdlib_h.htm\rhttps://www.tutorialspoint.com/c_standard_library/string_h.htm\r\rCOMPILACIÓN\r\rCompilar: gcc -c -o StringC.o StringC.c\rMontar: gcc -o "StringC" ./StringC.o\r\rConsultar el manual de gcc: man gcc (man info)\nSe suministra un makefile a modo de presentación de la herramienta\u0026nbsp;Make\nTAREAS\r1ª Parte\rCompletar función catstr1()\n2ª Parte\rEn la función main del programa se invocan las cuatro funciones implementadas.\u0026nbsp;Cada una corresponde con un test diferente. Para testear de manera unitaria debería\u0026nbsp;haber un main diferente para cada test. Por tanto, se pide:\n\rCrear un StringC.h con todas las cabeceras (declaraciones) de las funciones en StringC.c\rCrear un programa de test para cada caso. Por ejemplo, test1.c\rCompilar y ejecutar por separado cada test\r\r3ª Parte\rAdicionalmente, se puede plantear el ejercicio seleccionando el test a ejecutar desde la línea de orden. Es decir, como argumento en la línea de orden\u0026nbsp;\n\u0026nbsp;\n'}),a.add({id:13,href:'/seg-pps.github.io/docs/pps/Structs/',title:"Structs \u0026\u0026 Union",section:"PPS",content:"Tutoriales\rLos siguientes enlaces son muy apropiados para este tópico de la asignatura:\n\rC structs Tutorialspoint\rWikibooks: Struct y Union en el lenguaje de programación C\rManejo de structs en C\r\rEjemplo básico\r#include\u0026lt;stdio.h\u0026gt;\n/* * Definición de un struct StudentData\r*/structStudentData{char*stu_name;intstu_id;intstu_age;};intmain(){/* Declaración de una variable struct StudentData */structStudentDatastudent; \u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;com\u0026quot;\u0026gt;/* Definición de valores de los campos de cada miembro */\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;pln\u0026quot;\u0026gt;\rstudent\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;pun\u0026quot;\u0026gt;.\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;pln\u0026quot;\u0026gt;stu_name \u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;pun\u0026quot;\u0026gt;=\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;pln\u0026quot;\u0026gt; \u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;str\u0026quot;\u0026gt;\u0026quot;Steve\u0026quot;\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;pun\u0026quot;\u0026gt;;\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;pln\u0026quot;\u0026gt;\rstudent\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;pun\u0026quot;\u0026gt;.\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;pln\u0026quot;\u0026gt;stu_id \u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;pun\u0026quot;\u0026gt;=\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;pln\u0026quot;\u0026gt; \u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;lit\u0026quot;\u0026gt;1234\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;pun\u0026quot;\u0026gt;;\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;pln\u0026quot;\u0026gt;\rstudent\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;pun\u0026quot;\u0026gt;.\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;pln\u0026quot;\u0026gt;stu_age \u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;pun\u0026quot;\u0026gt;=\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;pln\u0026quot;\u0026gt; \u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;lit\u0026quot;\u0026gt;30\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;pun\u0026quot;\u0026gt;;\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;pln\u0026quot;\u0026gt;\r\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;com\u0026quot;\u0026gt;/* Presentación en pantalla */\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;pln\u0026quot;\u0026gt;\rprintf\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;pun\u0026quot;\u0026gt;(\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;str\u0026quot;\u0026gt;\u0026quot;Student Name is: %s\u0026quot;\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;pun\u0026quot;\u0026gt;,\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;pln\u0026quot;\u0026gt; student\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;pun\u0026quot;\u0026gt;.\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;pln\u0026quot;\u0026gt;stu_name\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;pun\u0026quot;\u0026gt;);\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;pln\u0026quot;\u0026gt;\rprintf\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;pun\u0026quot;\u0026gt;(\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;str\u0026quot;\u0026gt;\u0026quot;\\nStudent Id is: %d\u0026quot;\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;pun\u0026quot;\u0026gt;,\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;pln\u0026quot;\u0026gt; student\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;pun\u0026quot;\u0026gt;.\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;pln\u0026quot;\u0026gt;stu_id\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;pun\u0026quot;\u0026gt;);\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;pln\u0026quot;\u0026gt;\rprintf\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;pun\u0026quot;\u0026gt;(\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;str\u0026quot;\u0026gt;\u0026quot;\\nStudent Age is: %d\u0026quot;\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;pun\u0026quot;\u0026gt;,\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;pln\u0026quot;\u0026gt; student\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;pun\u0026quot;\u0026gt;.\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;pln\u0026quot;\u0026gt;stu_age\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;pun\u0026quot;\u0026gt;);\u0026lt;br /\u0026gt;\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;pln\u0026quot;\u0026gt;\r\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;kwd\u0026quot;\u0026gt;return\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;pln\u0026quot;\u0026gt; \u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;lit\u0026quot;\u0026gt;0\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;pun\u0026quot;\u0026gt;;\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;pln\u0026quot;\u0026gt;\r }\n\nStruct vs Union\rMaterial de apoyo\rEnlace de descarga aquí. El ejercicio presenta el código de un programa con las siguientes características:\n\ren el archivo cabecera Libros.h se declara un tipo Libro que es un struct (Libros)\rse procesan los argumentos en la línea de orden para interactuar con el programa\rse leen y escriben archivos en modo binario y modo texto\ren particular, muestra en pantalla (salida estándar) los contenidos de un fichero que se le pasa como argumento\r\rSintaxis de invocación del programa\r\r./LibrosIO [1|2|3]\r./LibrosIO 4 nombre_archivo\r\r\u0026nbsp;\n"}),a.add({id:14,href:'/seg-pps.github.io/uncategorised/',title:"Uncategorised",section:"Portada",content:"Uncategorised\n"}),a.add({id:15,href:'/seg-pps.github.io/docs/pps/intro/ManUse/',title:"Uso del man",section:"PPS",content:"Utilizar las páginas del manual\r$ man nombre_de_página\nLos manuales se ordenan en secciones:\n\rComandos generales\rLlamadas al sistema (funciones provistas por el kernel)\rLlamadas a librerías (funciones de la librería de C)\rFicheros especiales (normalmente se encuentran /dev) y controladores\rFormatos de archivos y convenciones\rJuegos\rMiscelánea (incluye convenciones)\rComandos de administración de sistemas (normalmente requiere privilegios de superusuario) y demonios\r\rLibrería vs Kernel\rOJO, no confundir las líbrerías C con las funciones del kernel. Aunque esta cuestión es más propia de sistemas operativos, basta con tener en cuenta lo siguiente:\n\ren la práctica del programador (la asignatura) no hay necesidad de distinción alguna. Kernel y librería C proveen conjuntamente todos los servicios que necesita\rlas funciones de la librería se pueden ver como programas que otros programadores han escrito para facilitarnos la vida (no repetir el mismo programa)\ren último extremo, las funciones de la librería invocan los servicios del kernel\rla librería oculta los detalles de cada sistema en particular que quedan confinados en el kernel. Es decir, la librería es la misma para culaquier sistema UNIX, en particular, cualquier distro Linux\r\rman S keyword\rGeneralmente, para indicar las páginas del manual se suelen usar el nombre seguido del número entre paréntesis de la sección a la que pertenece. A menudo , existen múltiples páginas del manual con el mismo nombre, como man(1) y man(7). Por ejemplo, para leer la página del manual sobre /etc/passwd, en vez de la página sobre el propio comando passwd.:\n$ man 5 passwd\nWhatis\rDescripciones de una línea de las páginas del manual pueden mostrarse usando el comando whatis. Por ejemplo, para una breve descripción de las páginas de secciones del manual sobre printf:\nsantiago@Folio13:~$ whatis printf\nprintf (3) - formatted output conversion\nprintf (1) - format and print data\n"})})()